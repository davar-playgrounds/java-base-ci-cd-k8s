
# Install kubectl
az aks install-cli

# Login
az login

# Create Kubernetes Resource group
az group create --name creditBRk8sResourceGroup --location eastus

# Create Kubernetes Cluster
az aks create --resource-group creditBRk8sResourceGroup --name creditBRk8sCluster --generate-ssh-keys

# Configure kubectl cli to point to your cluster
az aks get-credentials --name creditBRk8sCluster --resource-group creditBRk8sResourceGroup

# Configure ACR Service
# https://docs.microsoft.com/en-us/azure/aks/tutorial-kubernetes-prepare-acr#deploy-azure-container-registry
az acr create --resource-group creditBRk8sResourceGroup --name creditbrregistry --sku Basic

# Enable admin access
az acr update -n creditbrregistry --admin-enabled true

# Show ACR password
az acr credential show --name creditbrregistry --query passwords[0]

# Set Registry Credentials to Kubernetes
kubectl create secret docker-registry acrcredentials --docker-server=creditbrregistry.azurecr.io --docker-username=creditbrregistry --docker-password=kJAYQFLLnLcWNU3ceZMc1Rr0RYfH/UFz --docker-email=brq@creditbr.com.br

# View nodes from your cluster
kubectl get nodes

# Install HELM on a local computer
# https://github.com/kubernetes/helm

helm init --upgrade

# BugFix
# kubectl create serviceaccount --namespace kube-system tiller
# kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
# kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}' 

git clone https://github.com/kubernetes/charts

cd charts/stable/jenkins

vi values.yaml

# Change InstallPlugins section
  InstallPlugins:
    - kubernetes:1.2
    - workflow-aggregator:2.5
    - workflow-job:2.17
    - credentials-binding:1.15
    - git:3.7.0
    - ghprb:1.40.0
    - blueocean:1.4.1


helm install --name jenkins -f values.yaml .

# Remove installed service
helm delete jenkins
helm del --purge jenkins

# Jenkins instructions
# Discover jenkins password
printf $(kubectl get secret --namespace default jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo

# Watch Jenkins service status
kubectl get svc --namespace default -w jenkins

# Get IP Address
export SERVICE_IP=$(kubectl get svc --namespace default jenkins --template "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}")

# Access service
echo http://$SERVICE_IP:8080/login

# Create Aditional Volume
kubectl apply -f jenkins/maven-volume-claim.yaml

# SONARQUBE

helm install stable/sonarqube --name sonar

# Watch Sonar service status
kubectl get svc -w sonar-sonarqube

# Get IP Address
export SERVICE_IP=$(kubectl get svc --namespace default sonar-sonarqube -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

# Acess Service
echo http://$SERVICE_IP:9000


# NEXUS

helm install stable/sonatype-nexus --name registry

# Watch Sonar service status
kubectl get svc -w registry-sonatype-nexus

# Get IP Address
export SERVICE_IP=$(kubectl get svc --namespace default registry-sonatype-nexus -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

# Acess Service
echo http://$SERVICE_IP:8081

# 
kubectl create configmap maven-settings-xml --from-file=settings.xml


# https://docs.microsoft.com/en-us/vsts/build-release/actions/integrate-jenkins-vsts-aks?view=vsts



# Alternative
git clone https://github.com/coderise-lab/k8s-sonarqube.git

kubectl get nodes

kubectl create secret generic postgres-pwd --from-literal=password=1a2b3c4d5e

kubectl create -f sonar-pv-postgres.yaml     
kubectl create -f sonar-pvc-postgres.yaml  
kubectl create -f sonar-postgres-deployment.yaml  
kubectl create -f sonarqube-deployment.yaml
kubectl create -f sonarqube-service.yaml
kubectl create -f sonar-postgres-service.yaml

kubectl get po -o wide 

kubectl get svc


# NEXUS

kubectl apply -f nexus-volume.yaml

